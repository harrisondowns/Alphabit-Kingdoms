{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red47\green47\blue47;\red255\green255\blue255;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c24314\c24314\c24314;\cssrgb\c100000\c100000\c100000;\csgray\c100000;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
README\
Alphabit Kingdoms\
Harrison Downs\
\
The entire project is written in Java using the slick2D library (an extension of LWJGL). All graphics in the game are rendered using ASCII characters. Some of the big challenges I faced while writing this game were: \cb4 \
\cb3 -\'a0
\b Rendering:
\b0 \'a0One of the first big challenges was finding a way to render hundreds of ASCII letters to the screen without sacrificing performance. These tiles also had to be multicolored and some were animated.\cb4 \
\cb3 -\'a0
\b Game World:
\b0 \'a0The game world wasn't going to be large, so it needed to be able to loop around the edges like Pacman. The AI also had to be able to interact with this looping world in a way that made sense.\cb4 \
\cb3 - 
\b Logic:\'a0
\b0 With 200 entities on the map at all times, finding ways to keep the game logic updating smoothly was a must.\cb4 \
\cb3 -\'a0
\b Cows:\'a0
\b0 Okay, so the cows weren't actually that hard to implement but I still love them (see left image).\
\
The entire project is available under the GNU General Public License.\cb4 \
\cb3 Repo link: https://github.com/harrisondowns/Alphabit-Kingdoms\cb4 \
\
\cb3 If I were to redo the project, I would add more types of items and tiles to the game, as well as add more unique types of units to spice up combat. I would also love to make the game multiplayer at some point in the future.}